{"meta":{"title":"码坑的博客","subtitle":"请多指教","description":"本人是小白,初次与各位相遇,请多多指教,谢谢 じ萌喵喵ルゞ Ю↘ 珂ル°","author":"码坑","url":"https://ahjie.top","root":"/"},"pages":[{"title":"影视","date":"2020-10-17T11:13:41.000Z","updated":"2020-10-18T16:36:26.450Z","comments":true,"path":"Guoman/index.html","permalink":"https://ahjie.top/Guoman/index.html","excerpt":"","text":"注: 如有侵权请留言，收到反馈以后会尽快处理！ 本网站为非盈利性站点. 本网站影视内容均来源于互联网相关站点自动搜索采集信息."},{"title":"关于","date":"2020-08-19T13:29:12.000Z","updated":"2020-10-15T19:28:22.011Z","comments":true,"path":"about/index.html","permalink":"https://ahjie.top/about/index.html","excerpt":"","text":"💍 本人 专修电脑 💔混饭吃 网络编程 菜鸟 💍 博客 本博客始于：2020 年 8 月 18 日 搭建此博客是为了结实更多的朋友， 大家能够来到我的博客是一种缘分 也是为了能和大家一起学习更多的东西 💍 微信公众号 各位有问题也可以搜索微信公众号 &quot;码坑&quot; 私信我，大家一起讨论学习。"},{"title":"文章分类","date":"2020-08-19T11:29:19.000Z","updated":"2020-08-19T13:25:00.987Z","comments":true,"path":"categories/index.html","permalink":"https://ahjie.top/categories/index.html","excerpt":"","text":""},{"title":"互换友链","date":"2020-08-24T08:05:18.000Z","updated":"2021-06-15T07:08:56.732Z","comments":true,"path":"friends/index.html","permalink":"https://ahjie.top/friends/index.html","excerpt":"","text":"💍 本站信息 站名：码坑的博客 站长：码坑 地址: https://www.ahjie.top 标志: 简介：计算编程 &amp; 技术博客 Yml123456- site: #网站的名字 owner: #您的名字 url: #您的网址 desc: #简短描述 image: #一张图片 color: #方块颜色 💍 友链列表 以下排名不分先后，欢迎访问 (～￣▽￣)～ 阿杰代刷 各类产品代刷 & 有意思我 码坑影视 影视网站 & 各类影视 & 免费观看 非凡云博客 技术 & 素材解析 java知识分享网 java技术分享&java干货"},{"title":"标签","date":"2020-08-19T11:28:05.000Z","updated":"2020-08-19T13:14:38.790Z","comments":true,"path":"tags/index.html","permalink":"https://ahjie.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java驱动方式JDBC连接SQL Server","slug":"java/JDBC连接Sql Server","date":"2021-12-27T03:58:56.538Z","updated":"2021-12-27T06:08:56.200Z","comments":true,"path":"java/JDBC连接Sql Server/","link":"","permalink":"https://ahjie.top/java/JDBC%E8%BF%9E%E6%8E%A5Sql%20Server/","excerpt":"","text":"# Java 驱动方式 JDBC 连接 SQL Server 最近有些小伙伴公众号和博客留言说到，博主可以出一个 java 驱动方式 JDBC 链接 Sql Server 的详细教程吗？ 然后我把能挤出来的时间来给留言的小伙伴出一份 Java 驱动方式 JDBC 连接 SQL Server 的详细教程. 第一步 下载微软官方的 SQL Server JDBC 驱动程序 SQL_Server JDBC 驱动程序 安装说明微软官方说的很详细 注: 第二步：打开 Eclipse 工具 =》选择工作空间 右击 =》Build Path=》Configure Build Path 选择 Libraries 选卡 =》Add Exter JArs=》选择驱动的路径（如果是解压包解压即可用，.exe 看第一步注意） # 代码部分： Java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657mport java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;public class SQL &#123; public static void main(String[] args) throws Exception &#123; // Connection 对象的数据库能够提供描述其表、所支持的 SQL 语法、存储过程、此连接功能等等的信息。此信息是使用 // getMetaData 方法获得的。 Connection ct = null; // 表示预编译的 SQL 语句的对象。 // SQL 语句被预编译并存储在 PreparedStatement 对象中。然后可以使用此对象多次高效地执行该语句。 PreparedStatement ps = null; /** * ResultSet:结果集，封装了使用JDBC进行查询的结果 * 1.调用Statement对象的excuteQuery(sql)方法可以得到结果集 * 2.ResultSet返回的实际上就是一张数据表，有一个指针 * 指向数据表的第一样的前面，可以调用next()方法检测下一行是否有效，若有效则返回true * ,并且指针下移，相当于迭代器对象的hasNext()和next()的结合体 * 3.当指针对位到确定的一行时，可以通过调用getXxx(index)或者getXxx(columnName) * 获取每一列的值，例如：getInt(1),getString(&quot;name&quot;) 4.ResultSet当然也需要进行关闭 */ ResultSet rs = null; // 1.加载驱动 Class.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;); // 2.得到连接 ct = DriverManager .getConnection( &quot;jdbc:sqlserver://192.168.42.144=》（ip地址）; databaseName=GraduateSystem_guangdian=》（数据库）&quot;,&quot;用户名&quot;, &quot;密码&quot;); // 3.发送sql语句 ps = ct.prepareStatement(&quot;select * from SYS_Sex&quot;); // 4.执行 rs = ps.executeQuery(); while (rs.next()) &#123; System.out.println(&quot;ID:&quot; + rs.getString(1) + &quot;\\t&quot; + &quot;性别:&quot; + rs.getString(2)); &#125; // 关闭记录集 if (rs != null) &#123; rs.close(); &#125; // 关闭申明 if (ps != null) &#123; ps.close(); &#125; // 关闭连接对象 if (ct!=null) &#123; ct.close(); &#125; &#125;&#125; Ip 地址：Win+R 输入：ipconfig","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"},{"name":"java基础","slug":"java/java基础","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"},{"name":"Java中代码生成器","slug":"java/java基础/Maven安装配置/docker/pom报错/sort/Java中代码生成器","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/Java%E4%B8%AD%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"},{"name":"Java驱动方式JDBC连接SQL Server","slug":"java/java基础/Maven安装配置/docker/pom报错/sort/Java中代码生成器/Java驱动方式JDBC连接SQL-Server","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/Java%E4%B8%AD%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/Java%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8FJDBC%E8%BF%9E%E6%8E%A5SQL-Server/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"LinkedeList和ArrayList的区别","slug":"java/LinkedeList和ArrayList的区别","date":"2021-11-12T08:26:15.246Z","updated":"2021-11-12T09:08:56.222Z","comments":true,"path":"java/LinkedeList和ArrayList的区别/","link":"","permalink":"https://ahjie.top/java/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"LinkedeList 和 ArrayList 是常用的两种存储结构，都可以实现了 List 接口，那么它们之间有什么区别？下面本篇文章就来带大家了解一下 LinkedeList 和 ArrayList 之间的区别，希望对大家有所帮助。 # LinkedeList 和 ArrayList 的区别 # 1、数据结构不同 ArrayList 是 Array (动态数组) 的数据结构，LinkedList 是 Link (链表) 的数据结构。 # 2、效率不同 当随机访问 List（get 和 set 操作）时，ArrayList 比 LinkedList 的效率更高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找。 当对数据进行增加和删除的操作 (add 和 remove 操作) 时，LinkedList 比 ArrayList 的效率更高，因为 ArrayList 是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动 # 3、自由性不同 ArrayList 自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而 LinkedList 自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用。 # 4、主要控件开销不同 ArrayList 主要控件开销在于需要在 lList 列表预留一定空间；而 LinkList 主要控件开销在于需要存储结点信息以及结点指针信息。 简单的写了一个 List 集合（ArrayList 和 LinkedList 的 Demo Java123456789101112131415161718192021222324252627282930import java.util.*;public class Main&#123; public static void main(String[] args) &#123; /* * ArrayList和LinkedList的区别： * 两者方法完全通用，效果也一样。只不过在存储的内部结构是不同的。 * ArrayList（动态数组）本身自带索引，更善于查找 * LinkedList（链式结构）更善于添加和删除 * */ List list = new ArrayList(); //List list = new LinkedList(); list.add(&quot;窗前明月光&quot;);//添加值 list.add(&quot;疑是地上霜&quot;); list.add(&quot;举头望明月&quot;); list.add(&quot;低头思故乡&quot;); list.add(null); list.remove(1); list.add(1,&quot;我插入一句话&quot;);//在索引为1的后面插入 list.set(1, &quot;这句话我改了&quot;);//更改索引为1的值 System.out.println(list.size());//得到长度 System.out.println(list.get(1));//得到索引为1下标的值 &#125;&#125;","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"},{"name":"王者荣耀中一个英雄是怎么被产生的？","slug":"java/王者荣耀中一个英雄是怎么被产生的？","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/"},{"name":"阿里云对象存储Oss","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/"},{"name":"LinkedeList和ArrayList的区别","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"name":"java基础","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"音乐网站","slug":"Other-extensions/music","date":"2021-09-04T11:24:32.982Z","updated":"2021-11-12T09:14:27.507Z","comments":true,"path":"Other-extensions/music/","link":"","permalink":"https://ahjie.top/Other-extensions/music/","excerpt":"","text":"# 今天给大家说一个好消息，我个人做了一个项目，这个项目，这个项目呢，也不大，功能也不是特别复杂，只是呢，做这个项目的初衷呢，是因为我个人平时还是喜欢听歌的，所以我想做一个属于自己的音乐网站来玩玩，想怎么玩，就怎么玩，所以我动手做了这个项目. # 因为第一版本，多少有点 bug，但是我想说的是，目前还没有发现 bug 的所在，有 bug 的话，我及时维护并且，同时这个项目呢，我后期也会持续更新维护，目前话第一版本已经完善，等待 9 月中旬上线此项目，这个不做推广，只是单纯做一个来玩玩，切记，不做运营推广。 # 因为毕竟做这个是需要版权授权的，过多的我就不解释呢，这个项目不做为开源项目，有需要可以购买，我直接定价吧，💍 ￥168 元。 💍 毕竟我写代码也需要时间和过多思考问题和解决问题，请谅解！。 💍 下面给大家看一下前端页面截图。 # 前端首页截图 # 后端首页截图 # 后端首页截图","categories":[{"name":"其他扩展","slug":"Other-extensions","permalink":"https://ahjie.top/categories/Other-extensions/"},{"name":"hexo分类and标签404","slug":"Other-extensions/hexo分类and标签404","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/"},{"name":"特别的惊喜","slug":"Other-extensions/hexo分类and标签404/特别的惊喜","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E7%89%B9%E5%88%AB%E7%9A%84%E6%83%8A%E5%96%9C/"},{"name":"音乐网站","slug":"Other-extensions/hexo分类and标签404/特别的惊喜/音乐网站","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E7%89%B9%E5%88%AB%E7%9A%84%E6%83%8A%E5%96%9C/%E9%9F%B3%E4%B9%90%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://ahjie.top/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"特别的惊喜","slug":"Other-extensions/expand","date":"2021-08-19T14:46:48.333Z","updated":"2021-11-12T09:14:58.756Z","comments":true,"path":"Other-extensions/expand/","link":"","permalink":"https://ahjie.top/Other-extensions/expand/","excerpt":"","text":"最近一段时间都比较繁忙，没时间更新时间更新博客内容，还请大家谅解， 那么今天和大家介绍一个我考虑了很久，要拿下的一个后台模板，这个模板我犹豫了半年没有勇气敢拿下，其中原因就不必多说，这个后台模板呢，不是因为页面美观，也不是页面有什么特效之类的东西，而是我看中了，这个后台模板中的一个功能，一个大家也想拥有的一个功能，我估计吧，做我们程序员这个行业没多久的人都想着有没有现成的功能以及源码，参照一下，其实吧，我说句实话没必要，因为只有自己通过自己思维写出来的程序，才能给自己带来一点成就感，因为毕竟是自己亲手写出来的，但是这个不是我说这个功能的重点。 # 先看功能图 估计各位小伙伴看到这个不陌生吧，在现如今这个社会，沟通这个必不可少吧，当然这个不是我写的，我也没这个能力，这个功能就是我看重这个后台模板的最主要原因。 大家都知道我们前端框架有很多， 例如: Vue.React.Layui.Bootstrap 等框架！ 今天我们介绍这个前端框架就是 Layui Layui 这个框架我相信大家都不会陌生 # 给大家看一下 Layui 官网图 # 下面到我表演了！ 这个就是忍痛割爱拿下来的，给大家看一下价格 # 单页版 || iframe 版 价格一样 # 通用版 开始的时候，我惊了这么贵，后面想了一下人家作者做出来也不容易，买这个价格也不为过，所以我买了 # 后台主题 最终后台模板程序效果， 花了￥1600 大洋，拿下了！ 有朋友需要可以来联系我，记住不是白嫖哦，毕竟我也是花钱买的哦， 联系我拿下此模板！可以通过微信公众号搜索 码坑 私信我进行购买！ 价格定价为: ￥10 大洋","categories":[{"name":"其他扩展","slug":"Other-extensions","permalink":"https://ahjie.top/categories/Other-extensions/"},{"name":"hexo分类and标签404","slug":"Other-extensions/hexo分类and标签404","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/"},{"name":"特别的惊喜","slug":"Other-extensions/hexo分类and标签404/特别的惊喜","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E7%89%B9%E5%88%AB%E7%9A%84%E6%83%8A%E5%96%9C/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://ahjie.top/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"王者荣耀中一个英雄是怎么被产生的？","slug":"java/王者荣耀一个英雄如何被产生","date":"2021-05-21T03:50:23.619Z","updated":"2021-05-21T03:59:57.713Z","comments":true,"path":"java/王者荣耀一个英雄如何被产生/","link":"","permalink":"https://ahjie.top/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E5%A6%82%E4%BD%95%E8%A2%AB%E4%BA%A7%E7%94%9F/","excerpt":"","text":"# 王者荣耀中一个英雄是怎么被产生的？（一） 对象和类的小练习一） 我呢平时也会玩玩游戏，比如今天要说的这个王者荣耀，其实把这个游戏我平时没事的时候都会玩一下，然后突然脑洞打开，想了一下，我自己是一个学习程序的，何不模拟一下这个游戏里面一些东西出来玩玩，当然这并不是只是为了玩，顺便复习 Java 中 (OOP) 的相关的一些知识 # 前期准备 我们要在 IDEA 上创建一个新的项目，创建好一个项目后，我们需要创建 5 个包，分别是英雄包，装备包，铭文包，野怪包，皮肤包 然后我们就可以一个一个的实现这些功能了。 # 实现我的英雄梦！ # 1. 英雄基本属性实现 Java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.example.demo.hero;import lombok.Data;/** * @ProjectName: demo * @Package: com.example.demo.hero * @ClassName: Hero * @Author: 码 坑 * @Description: Hero * @Date: 2021/5/21 10:39 * @Version: 1.0 * 所有Get or Set 方法即用 @Data注解替代 */@Datapublic class Hero &#123; public String name; //英雄的名字 public String type; //英雄的职业 public int blood; //英雄的基本血量 public int phyattack; //英雄的基本物理攻击 public int Magicattavk; //英雄的基本法术攻击 public int phyfangyu; //英雄的基础防御 public int attavknum; //普通伤害的值 public int move; //移动速度 public int money; //经济 public Hero(String name, String type, int blood, int phyattack, int magicattavk, int phyfangyu, int attavknum, int move, int money) &#123; this.name = name; this.type = type; this.blood = blood; this.phyattack = phyattack; Magicattavk = magicattavk; this.phyfangyu = phyfangyu; this.attavknum = attavknum; this.move = move; this.money = money; &#125; //受到普通攻击 public int bnormalAttack(int attavknum) &#123; if (this.phyfangyu - this.attavknum &lt;= 0) &#123; int res = this.phyfangyu - this.attavknum; return this.blood + res; &#125; return blood - this.attavknum; &#125; //普通攻击 public int znormalAttack() &#123; if (this.type == &quot;射手&quot; || this.type == &quot;战士&quot; || this.type == &quot;刺客&quot;) &#123; this.attavknum += phyattack; &#125; if (this.type == &quot;法师&quot;) &#123; this.attavknum += Magicattavk; &#125; return attavknum; &#125;&#125; # 2. 装备包 装备太多了，我主要写一些我平时比较喜欢的几个装备，有兴趣的盆友可以自己练习多写几个 # 鞋子 Java12345678910111213141516171819202122232425262728293031package com.example.demo.equipment;import lombok.Data;/** * 抵抗之靴 * * @ProjectName: demo * @Package: com.example.demo.equipment * @ClassName: Equipment * @Author: 码 坑 * @Description: Equipment * @Date: 2021/5/21 10:43 * @Version: 1.0 * 所有Get or Set 方法即用 @Data注解替代 */@Datapublic class Equipment &#123; /** * 效果：减低敌方的攻击，也就是增加自己的物防 */ public String name = &quot;抵抗之靴&quot;; public int phyattack = 200; public int mckattack = 0; public int move = 200;//英雄移动速度+200；&#125; # 反甲 Java1234567891011121314151617181920212223242526package com.example.demo.equipment;import lombok.Data;/** * 反甲 * * @ProjectName: demo * @Package: com.example.demo.equipment * @ClassName: The_armor * @Author: 码 坑 * @Description: The_armor * @Date: 2021/5/21 10:46 * @Version: 1.0 * 所有Get or Set 方法即用 @Data注解替代 */@Datapublic class The_armor &#123; public String name = &quot;反甲&quot;; public int phyattack = 40; public int phyfanyu = 420; public double fashang = 0.2; //冷却时间&#125; # 暗影战斧 Java123456789101112131415161718192021222324package com.example.demo.equipment;import lombok.Data;/** * 暗影战斧 * * @ProjectName: demo * @Package: com.example.demo.equipment * @ClassName: Shadow_tomahawk * @Author: 码 坑 * @Description: Shadow_tomahawk * @Date: 2021/5/21 10:49 * @Version: 1.0 * 所有Get or Set 方法即用 @Data注解替代 */@Datapublic class Shadow_tomahawk &#123; public String name = &quot;暗影战斧&quot;; public int phyattack = 85; //加物理攻击85 public int blood = 500; //生命值加500 public int cool = 15; //冷却缩减15&#125; # 3. 没有经济来源怎么行？野怪实现 我主要写了野猪，小鸟，河蟹，小兵的类 # 野猪 Java123456789101112131415161718192021package com.example.demo.creeps;import lombok.Data;/** * 野猪 * * @ProjectName: demo * @Package: com.example.demo.creeps * @ClassName: pig * @Author: 码 坑 * @Description: pig * @Date: 2021/5/21 10:51 * @Version: 1.0 * 所有Get or Set 方法即用 @Data注解替代 */@Datapublic class pig &#123; public int num = 80;&#125; # 小鸟 Java123456789101112131415161718192021package com.example.demo.creeps;import lombok.Data;/** * 小鸟 * * @ProjectName: demo * @Package: com.example.demo.creeps * @ClassName: Bird * @Author: 码 坑 * @Description: Bird * @Date: 2021/5/21 10:53 * @Version: 1.0 */@Datapublic class Bird &#123; public int num = 150;&#125; # 河蟹 Java12345678910111213141516171819202122package com.example.demo.creeps;import lombok.Data;/** * 河蟹 * * @ProjectName: demo * @Package: com.example.demo.creeps * @ClassName: Crabs * @Author: 码 坑 * @Description: Crabs * @Date: 2021/5/21 10:54 * @Version: 1.0 * 所有Get or Set 方法即用 @Data注解替代 */@Datapublic class Crabs &#123; public int num = 150;&#125; # 小兵 Java12345678910111213141516171819202122package com.example.demo.creeps;import lombok.Data;/** * 小兵 * * @ProjectName: demo * @Package: com.example.demo.creeps * @ClassName: Soldiers * @Author: 码 坑 * @Description: Soldiers * @Date: 2021/5/21 10:55 * @Version: 1.0 * 所有Get or Set 方法即用 @Data注解替代 */@Datapublic class Soldiers &#123; public int num = 150;&#125; # 三、开始游戏啦 Java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.example.demo;import com.example.demo.creeps.Bird;import com.example.demo.creeps.Crabs;import com.example.demo.creeps.Soldiers;import com.example.demo.creeps.pig;import com.example.demo.equipment.Equipment;import com.example.demo.equipment.Shadow_tomahawk;import com.example.demo.equipment.The_armor;import com.example.demo.hero.Hero;public class DemoApplication &#123; public static void main(String[] args) &#123; Hero hero = new Hero(&quot;亚瑟&quot;, &quot;战士&quot;, 1000, 200, 0, 500, 200, 50, 0); System.out.println(hero.name); System.out.println(hero.money); //开始发育(先产生野怪，小兵，河蟹的实例化对象) pig pig1 = new pig(); Bird Bird = new Bird(); Soldiers soldiers = new Soldiers(); Crabs crabs2 = new Crabs(); for (int i = 0; i &lt;= 10; i++) &#123; //打了10轮 hero.money += pig1.getNum() + Bird.getNum() + soldiers.getNum() + crabs2.getNum(); &#125; System.out.println(hero.name + &quot;的经济现在是&quot; + hero.money); //开始创建装备类 System.out.println(&quot;购买装备前：&quot;); System.out.println(hero.name + &quot;当前的属性&quot; + &quot;生命值：&quot; + hero.blood + &quot;物理攻击：&quot; + hero.phyattack + &quot;法术攻击：&quot; + hero.Magicattavk + &quot; 物理防御：&quot; + hero.phyfangyu + &quot;移动速度：&quot; + hero.move); //判断经济是否购买装备 if (hero.money &gt;= 200) &#123; Equipment equipment = new Equipment(); System.out.println(hero.name + &quot;购买了&quot; + equipment.name); hero.phyfangyu += equipment.getPhyattack(); hero.move += equipment.getMove(); hero.money = hero.money - 200; &#125; if (hero.money &gt;= 1200) &#123; The_armor armor = new The_armor(); System.out.println(hero.name + &quot;购买了&quot; + armor.name); hero.phyattack += armor.getPhyattack(); //攻击力+ hero.phyfangyu += armor.getPhyfanyu(); //防御力+ hero.money = hero.money - 1200; &#125; if (hero.money &gt;= 2000) &#123; Shadow_tomahawk tomahawk = new Shadow_tomahawk(); System.out.println(hero.name + &quot;购买了&quot; + tomahawk.name); hero.phyattack += tomahawk.getPhyattack(); //攻击力+ hero.blood += tomahawk.getBlood(); //生命力+ hero.money = hero.money - 2000; &#125; System.out.println(&quot;购买装备后：&quot;); System.out.println(hero.name + &quot;当前的属性&quot; + &quot;生命值：&quot; + hero.blood + &quot;物理攻击：&quot; + hero.phyattack + &quot;法术攻击：&quot; + hero.Magicattavk + &quot; 物理防御：&quot; + hero.phyfangyu + &quot;移动速度：&quot; + hero.move); &#125;&#125; 我基本可以实现简单的创建一个英雄，实现刷野怪，购买装备的简单操作，后序我将实现英雄的三个技能和铭文的实现，感谢支持！ # 码坑 如以上内容对你有帮助，请转发收藏哦，更多相关内容请关注码坑公众号","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"},{"name":"王者荣耀中一个英雄是怎么被产生的？","slug":"java/王者荣耀中一个英雄是怎么被产生的？","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/"},{"name":"阿里云对象存储Oss","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/"},{"name":"java基础","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"阿里云对象存储Oss","slug":"java/文件上传","date":"2021-05-11T03:19:23.028Z","updated":"2021-05-11T05:11:31.456Z","comments":true,"path":"java/文件上传/","link":"","permalink":"https://ahjie.top/java/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","excerpt":"","text":"# 💍 阿里云对象存储 Oss 介绍 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云对外提供的海量、安全、低成本、高可靠的云存储服务。您可以通过本文档提供的简单的 REST 接口，在任何时间、任何地点、任何互联网设备上进行上传和下载数据。基于 OSS，您可以搭建出各种多媒体分享网站、网盘、个人和企业数据备份等基于大规模数据的服务。 # 使用限制 您使用的 OSS 资源和相关功能，都有一定的限制，具体请参见 OSS 使用限制。 # 使用说明 OSS API 参考主要介绍接口的请求语法、相关参数含义以及请求和返回示例。如果要进行快速二次开发，建议您使用 SDK 开发包。关于 SDK 的安装和使用，请参见 OSS SDK 参考。 # 错误码 请参见 OSS 常见错误响应。 # 💍 资源术语 中文 英文 说明 存储空间 Bucket 存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。 对象 / 文件 Object 对象是 OSS 存储数据的基本单元，也被称为 OSS 的文件。对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的 Key 来标识。 地域 Region 地域表示 OSS 的数据中心所在物理位置。您可以根据费用、请求来源等综合选择数据存储的地域。详情请查看 OSS 已经开通的 Region。 访问域名 Endpoint Endpoint 表示 OSS 对外服务的访问域名。OSS 以 HTTP RESTful API 的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。具体的内容请参见各个 Region 对应的 Endpoint。 访问密钥 AccessKey AccessKey，简称 AK，指的是访问身份验证中用到的 AccessKeyId 和 AccessKeySecret。OSS 通过使用 AccessKeyId 和 AccessKeySecret 对称加密的方法来验证某个请求的发送者身份。AccessKeyId 用于标识用户，AccessKeySecret 是用户用于加密签名字符串和 OSS 用来验证签名字符串的密钥，其中 AccessKeySecret 必须保密。 # 💍 我们以 [Java] 实现 oss 文件上传 # 我们先创建一个包名 (service) Java12345678910111213141516171819package com.ahjie.oss.service;import org.springframework.web.multipart.MultipartFile;/** * @ProjectName: ahjie_parent * @Package: com.ahjie.oss.service * @ClassName: OssService * @Author: 码 坑 * @Description: OssService * @Date: 2021/5/10 16:51 * @Version: 1.0 */public interface OssService &#123; //上传头像到oss String uploadFileAvatar(MultipartFile file);&#125; # 在从 service 包创建一个文件 (impl) Java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.ahjie.oss.service.impl;import com.aliyun.oss.OSS;import com.aliyun.oss.OSSClientBuilder;import com.ahjie.oss.service.OssService;import com.ahjie.oss.utlis.ConstantPropertiesUtils;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.InputStream;/** * @ProjectName: ahjie_parent * @Package: com.ahjie.oss.service.impl * @ClassName: OssServiceImpl * @Author: 码 坑 * @Description: OssServiceImpl * @Date: 2021/5/10 16:53 * @Version: 1.0 */@Servicepublic class OssServiceImpl implements OssService &#123; //上传头像到oss @Override public String uploadFileAvatar(MultipartFile file) &#123; // 通过工具类获取值 ConstantPropertiesUtils String endpoint = ConstantPropertiesUtils.END_POIND; // 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。 String accessKeyId = ConstantPropertiesUtils.ACCESS_KEY_ID; String accessKeySecret = ConstantPropertiesUtils.ACCESS_KEY_SECRET; String bucketName = ConstantPropertiesUtils.BUCKET_NAME; try &#123; // 创建OSSClient实例。 OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret); // 获取文件上传的输入流 InputStream inputStream = file.getInputStream(); //获取文件名称 String filename = file.getOriginalFilename(); // 调用oss方法实现文件上传 //第一个参数 Bucket名称 //第二个参数 上传到oss文件路径和文件名称 //第三个参数 上传文件输入流 ossClient.putObject(bucketName, filename, inputStream); // 关闭OSSClient。 ossClient.shutdown(); //把上传的之后路径返回 //需要把文件上传到阿里云oss路径手动拼接出来 String url = &quot;https://&quot; + bucketName + &quot;.&quot; + endpoint + &quot;/&quot; + filename; return url; &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125; &#125;&#125; # 💍 然后再创建一个 (controller) 包名 在 controller 下创建一个类即可 Java12345678910111213141516171819202122232425262728293031323334353637383940414243package com.ahjie.oss.controller;import com.atguigu.oss.service.OssService;import com.atguigu.utils.commutils.R;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;/** * @ProjectName: ahjie_parent * @Package: com.ahjie.oss.controller * @ClassName: OssController * @Author: 码 坑 * @Description: OssController * @Date: 2021/5/10 16:50 * @Version: 1.0 */@Api(description = &quot;Oss文件上传&quot;)@RestController@RequestMapping(&quot;/eduoss/fileoss&quot;)@CrossOrigin //防止调用跨越public class OssController &#123; @Autowired private OssService ossService; //上传文件方法 @PostMapping @ApiOperation(value = &quot;文件上传&quot;) public R uploadoss(MultipartFile file) &#123; //获取上传文件 MultipartFile //返回上传阿里oss的文件路径 String url = ossService.uploadFileAvatar(file); return R.ok().data(&quot;url&quot;, url); &#125;&#125; # 💍 配置文件 (application.properties) properties12345678910111213141516#服务端口server.port=8002#服务名spring.application.name=service-oss#环境设置：dev、test、prodspring.profiles.active=dev#阿里云 OSS#不同的服务器，地址不同aliyun.oss.file.endpoint=your endpointaliyun.oss.file.keyid=your accessKeyIdaliyun.oss.file.keysecret=your accessKeySecret#bucket可以在控制台创建，也可以使用java代码创建aliyun.oss.file.bucketname=your bucketname # 💍 工具类 (utils) Java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.ahjie.oss.utlis;import org.springframework.beans.factory.InitializingBean;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;/** * @ProjectName: ahjie_parent * @Package: com.ahjie.oss.utlis * @ClassName: ConstantPropertiesUtils * @Author: 码 坑 * @Description: ConstantPropertiesUtils * @Date: 2021/5/10 14:45 * @Version: 1.0 */@Componentpublic class ConstantPropertiesUtils implements InitializingBean &#123; //读取配置文件内容 @Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;) private String endpoint; @Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;) private String keyId; @Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;) private String keySecret; @Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;) private String bucketName; //定义公开静态常量 public static String END_POIND; public static String ACCESS_KEY_ID; public static String ACCESS_KEY_SECRET; public static String BUCKET_NAME; @Override public void afterPropertiesSet() throws Exception &#123; END_POIND = endpoint; ACCESS_KEY_ID = keyId; ACCESS_KEY_SECRET = keySecret; BUCKET_NAME = bucketName; &#125;&#125; # 以下是 oss 文件上传测试测试结果 # 以上内容以 Java 实现阿里云对象存储 Oss 文件上传的实现步骤，如果以上内容对你有帮助，可以请我 (喝奶茶哦！) 后期持续更新更多 Java 相关内容，感谢一直以来对 &lt; 码坑 &gt; 博客支持的朋友！","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"},{"name":"阿里云对象存储Oss","slug":"java/阿里云对象存储Oss","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/"},{"name":"java基础","slug":"java/阿里云对象存储Oss/java基础","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"Java中代码生成器","slug":"java/generate","date":"2021-04-29T07:49:33.318Z","updated":"2021-04-29T08:11:07.983Z","comments":true,"path":"java/generate/","link":"","permalink":"https://ahjie.top/java/generate/","excerpt":"","text":"# (神奇) 的代码生成器 我们大家不管是在任何场景编写代码的时候，相信大家都会用到一些工具之类软件或者其他，当然这是我们在编写代码的过程中可以有效的提高开发效率。 今天我就和大家介绍以恶搞不用去网上下载工具的情况下，就可以很方便生成自己想要一些的代码以及包名，可以有效的提高开发效率，今天给大家说的这个代码生成器是基于 Mybatis-plus 框架下的，今天我就给大家介绍一下这个可以生成代码的东西. # 废话不多说直接上代码 Pom1234567&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;&#x2F;groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;&#x2F;artifactId&gt; &lt;&#x2F;dependency&gt; # 你以为这样就可以了？ Java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.ahjie.demo;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.rules.DateType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import org.junit.Test;/** * @author * @since 2018/12/13 */public class CodeGenerator &#123; @Test public void run() &#123; // 1、创建代码生成器 AutoGenerator mpg = new AutoGenerator(); // 2、全局配置 GlobalConfig gc = new GlobalConfig(); String projectPath = System.getProperty(&quot;user.dir&quot;); gc.setOutputDir(&quot;E:\\\\IDEA\\\\guli_parent\\\\service\\\\service_edu&quot; + &quot;/src/main/java&quot;); gc.setAuthor(&quot;Ah Jie&quot;); gc.setOpen(false); //生成后是否打开资源管理器 gc.setFileOverride(false); //重新生成时文件是否覆盖 //UserServie gc.setServiceName(&quot;%sService&quot;); //去掉Service接口的首字母I gc.setIdType(IdType.ID_WORKER_STR); //主键策略 gc.setDateType(DateType.ONLY_DATE);//定义生成的实体类中日期类型 gc.setSwagger2(true);//开启Swagger2模式 mpg.setGlobalConfig(gc); // 3、数据源配置 DataSourceConfig dsc = new DataSourceConfig(); dsc.setUrl(&quot;jdbc:mysql://localhost:3306/demo?serverTimezone=GMT%2B8&quot;); dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;); dsc.setUsername(&quot;root&quot;); dsc.setPassword(&quot;root&quot;); dsc.setDbType(DbType.MYSQL); mpg.setDataSource(dsc); // 4、包配置 PackageConfig pc = new PackageConfig(); pc.setModuleName(&quot;demo&quot;); //模块名 //包 com.ahjie.demo pc.setParent(&quot;com.atguigu&quot;); //包 com.ahjie.eduservice.controller pc.setController(&quot;controller&quot;); pc.setEntity(&quot;entity&quot;); pc.setService(&quot;service&quot;); pc.setMapper(&quot;mapper&quot;); mpg.setPackageInfo(pc); // 5、策略配置 StrategyConfig strategy = new StrategyConfig(); strategy.setInclude(&quot;demo&quot;); strategy.setNaming(NamingStrategy.underline_to_camel);//数据库表映射到实体的命名策略 strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;); //生成实体时去掉表前缀 strategy.setColumnNaming(NamingStrategy.underline_to_camel);//数据库表字段映射到实体的命名策略 strategy.setEntityLombokModel(true); // lombok 模型 @Accessors(chain = true) setter链式操作 strategy.setRestControllerStyle(true); //restful api风格控制器 strategy.setControllerMappingHyphenStyle(true); //url中驼峰转连字符 mpg.setStrategy(strategy); // 6、执行 mpg.execute(); &#125;&#125; # 总结 # 以上就是本文关于 Java 中的数组排序代码详解的全部内容，希望对大家有所帮助。感兴趣的朋友可以继续参阅本站其他 Java 相关专题，如有不足之处，欢迎留言指出。感谢朋友们对本站的支持","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"},{"name":"java基础","slug":"java/java基础","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"},{"name":"Java中代码生成器","slug":"java/java基础/Maven安装配置/docker/pom报错/sort/Java中代码生成器","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/Java%E4%B8%AD%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"在线承接各类开发项目","slug":"Other-extensions/extension","date":"2021-03-27T09:37:01.453Z","updated":"2021-03-27T09:50:39.910Z","comments":true,"path":"Other-extensions/extension/","link":"","permalink":"https://ahjie.top/Other-extensions/extension/","excerpt":"","text":"# 阿杰从今天开始承接互联网各类开发项目 现如今的社会，互联网无处不在我们的身边 生活中我们都会使用微信或支付宝等软件 APP, 但是再这些 APP 上面有一个方便快捷的程序叫 “微信小程序” &amp;&amp; “支付宝小程序” 很多电商平台也是有自己小程序，我们就不用去下载 APP 或者打开浏览器输入网址进入某个网站 如果你也是准备入驻互联网，阿杰在此期待你的到来. 如果你想拥有自己网站。后台管理系统.APP. 小程序 # 阿杰承接项目如下 # 心动不如行动: # 期待你的加入！","categories":[{"name":"其他扩展","slug":"Other-extensions","permalink":"https://ahjie.top/categories/Other-extensions/"},{"name":"hexo分类and标签404","slug":"Other-extensions/hexo分类and标签404","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/"},{"name":"在线承接各类开发项目","slug":"Other-extensions/hexo分类and标签404/在线承接各类开发项目","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E5%9C%A8%E7%BA%BF%E6%89%BF%E6%8E%A5%E5%90%84%E7%B1%BB%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ahjie.top/tags/Hexo/"}]},{"title":"thinkphp5.0实现投票","slug":"php/PHP_vote","date":"2021-03-10T02:11:31.093Z","updated":"2021-03-10T02:44:38.702Z","comments":true,"path":"php/PHP_vote/","link":"","permalink":"https://ahjie.top/php/PHP_vote/","excerpt":"","text":"# 💍 简介 现在投票的功能，不管是 Web 端，小程序端，APP 端，现在投票这个功能可以说还是挺火的 今天呢，阿杰就给大家带来一个利用 php 中 thinkphp5.0 框架集合实现一个投票的功能， 我这边投票是用在了微信小程序端上，废话不多说，下面就给大家演示代码. 💍 在文章底部点击赞赏，请我喝杯奶茶哦！ 💍 正在努力学习～~ ~ ~ ~ ~ ~ ~ # 💍 来吧～展示 PHP 代码部分: PHP123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 判断投票 * @param VoteModel 投票表 * @param $uid 用户id * @param $vid 投票作品id */ public function vote_up($uid, $vid) &#123; if (Votes::get([&#x27;uid&#x27; =&gt; $uid])) &#123; $msg = [ &#x27;code&#x27; =&gt; 1002, &#x27;msg&#x27; =&gt; &#x27;您已经投过票了&#x27; ]; return json($msg); &#125; else &#123; //没有该投票,添加投票记录 $data = [ &#x27;uid&#x27; =&gt; $uid, &#x27;vid&#x27; =&gt; $vid, ]; (new Votes())-&gt;save($data); &#125; //获取当前id对应的投票公司 $res = Db::table(&#x27;vote&#x27;)-&gt;where(&#x27;id&#x27;,$vid)-&gt;find(); //获取当前投票中的投票数 $total = intval($res[&#x27;total_votes&#x27;]) + 1; //更新数据 $result = Db::table(&#x27;vote&#x27;)-&gt;where(&#x27;id&#x27;, $vid)-&gt;update([&#x27;total_votes&#x27; =&gt; $total]); //判断投票数据是否成功 if ($result == $result) &#123; $msg = [ &#x27;code&#x27; =&gt; &#x27;1000&#x27;, &#x27;msg&#x27; =&gt; &#x27;投票成功&#x27; ]; return json($msg); &#125; else &#123; $msg = [ &#x27;code&#x27; =&gt; &#x27;1001&#x27;, &#x27;msg&#x27; =&gt; &#x27;系统服务器繁忙&#x27; ]; return json($msg); &#125; &#125; # 💍 排行榜，以及投票数，都是简单操作，这里话就不给大家演示，提示：排行榜直接从数据库查询记录票数的字段进行排序就可以了，票数的话直接查询票数字段即可. 实现效果图如下 以上代码不以商用 # 💍 以上就是 php 中投票的实现方式，如果那里有不足之处请下方评论，我会及时纠正错误，有其他相关内容请收藏 “码坑的博客”，谢谢！ # 💍 下一期更新使用 Java 实现投票功能，本人是一个程序爱好者，如以上内容对你有用，请记得点赞分享哦，","categories":[{"name":"PHP后端开发","slug":"php","permalink":"https://ahjie.top/categories/php/"},{"name":"thinkphp5.0实现投票","slug":"php/thinkphp5-0实现投票","permalink":"https://ahjie.top/categories/php/thinkphp5-0%E5%AE%9E%E7%8E%B0%E6%8A%95%E7%A5%A8/"}],"tags":[{"name":"php","slug":"php","permalink":"https://ahjie.top/tags/php/"}]},{"title":"php文件上传API","slug":"php/phpAPI","date":"2020-12-04T09:15:45.014Z","updated":"2020-12-05T02:09:13.219Z","comments":true,"path":"php/phpAPI/","link":"","permalink":"https://ahjie.top/php/phpAPI/","excerpt":"","text":"# 💍 简介 文件上传这个功能，是我们程序员在开发过程中基本都能遇到，文件上传功能今天就用 php 来说说吧！ 我呢！ 是一个小白，如果以下内容有错误的地方请各位大佬，指点一二 以下内容如果对你有用 ↓ ↓ ↓ 💍 在文章底部点击赞赏，请我喝杯奶茶哦！ 💍 正在努力学习～~ ~ ~ ~ ~ ~ ~ # 💍 来吧～展示 废话不多说，直接上代码 PHP 代码部分: PHP123456789101112131415161718public class Demo&#123; public function upload() &#123; // 获取表单上传文件 例如上传了001.jpg $file = request()-&gt;file(&#x27;img&#x27;); // 移动到框架应用根目录/public/uploads/ 目录下 if ($file) &#123; $info = $file-&gt;move(ROOT_PATH . &#x27;public&#x27; . DS . &#x27;upload&#x27;); //保存路径 if ($info) &#123; return json([&#x27;code&#x27; =&gt; 1, &#x27;url&#x27; =&gt; $info-&gt;getSaveName()]); //成功 &#125; else &#123; return json([&#x27;code&#x27; =&gt; 0, &#x27;data&#x27; =&gt; $file-&gt;getError()]); //失败 &#125; &#125; &#125;&#125; HTML 代码部分: html1234567891011&lt;div class=&quot;row cl&quot;&gt; &lt;label class=&quot;form-label col-xs-4 col-sm-3&quot;&gt;上传头像：&lt;/label&gt; &lt;div class=&quot;formControls col-xs-8 col-sm-9&quot;&gt; &lt;span class=&quot;btn-upload form-group&quot;&gt; &lt;input type=&quot;file&quot; onchange=&quot;img_up(this)&quot; id=&quot;img&quot; name=&quot;img&quot; multiple=&quot;multiple&quot;/&gt; &lt;/span&gt; &lt;div id=&quot;thumbnail&quot;&gt; &lt;img src=&quot;__UPLOAD__/&#123;$product_info.img&#125;&quot; alt=&quot;&quot; style=&quot;width: 100px; height: 100px&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; Ajax 代码部分: JS123456789101112131415161718192021222324&lt;script type=&quot;text/javascript&quot;&gt; function img_up(e) &#123; let file = e.files[0]; var formData = new FormData(); formData.append(&#x27;img&#x27;, file); $.ajax(&#123; url: &#x27;&#123;:url(\\&#x27;Product/upload\\&#x27;)&#125;&#x27;, type: &#x27;POST&#x27;, data: formData, processData: false, contentType: false, success: function (data) &#123; console.log(data) if (data.code == 1) &#123; var dome = &#x27;&lt;img src=&quot;__UPLOAD__/&#x27; + data.url + &#x27;&quot; alt=&quot;&quot; style=&quot;width: 120px;height: 120px;&quot;/&gt;&lt;input type=&quot;hidden&quot; value=&quot;&#x27; + data.url + &#x27;&quot; name=&quot;img&quot;&gt;&#x27;; $(&#x27;#thumbnail&#x27;).html(dome); &#125; &#125;, error: function (res) &#123; console.log(res) &#125; &#125;) &#125;&lt;/script&gt; 实现效果图如下 # 图一 # 图二 # 💍 以上就是 php 中 API 的使用方式，如果那里有不足之处请下方评论，我会及时纠正错误，有其他相关内容请收藏 “码坑的博客”，谢谢！","categories":[{"name":"PHP后端开发","slug":"php","permalink":"https://ahjie.top/categories/php/"},{"name":"php文件上传API","slug":"php/php文件上传API","permalink":"https://ahjie.top/categories/php/php%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0API/"}],"tags":[{"name":"php","slug":"php","permalink":"https://ahjie.top/tags/php/"}]},{"title":"文件上传","slug":"web/文件上传","date":"2020-10-27T06:55:36.198Z","updated":"2020-11-06T10:29:17.680Z","comments":true,"path":"web/文件上传/","link":"","permalink":"https://ahjie.top/web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","excerpt":"","text":"# 💍 文件上传 我们这里实现的文件上传的功能不是通过 Vue—teact 现在主流的框架实现的，这里的话我们是通过 Bootstrap 框架实现的，当然实现文件 上传这个功能呢，可以使用多种办法实现，这里呢我就用 Bootstrap 来实现文件上传的功能。 此上传功能有 / 删除 / 预览 / 左右排序 / 功能这个功能是一个可以满足你在项目中的需求。 # 💍 效果如如下: 图片大小可以自定义上传 图片一次可以上传多少张，自定义即可. html123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;cupload例子&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h3 align=&quot;center&quot;&gt;初始化加载图片(5张, 已有三张)&lt;/h3&gt; &lt;div id=&quot;cupload-1&quot; align=&quot;center&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;script src=&quot;static/js/cupload.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var cupload6 = new Cupload (&#123; ele : &#x27;#cupload-1&#x27;, num : 5, data : [&quot;./static/image/1.jpg&quot;, &quot;./static/image/2.png&quot;, &quot;./static/image/3.jpg&quot;], ); &lt;/script&gt;&lt;/html&gt; # 💍 总结 # 如果有伙伴需要 js 代码的请下方留言！ 以上就是本文关于前端中的文件上传代码详解的全部内容，希望对大家有所帮助。感兴趣的朋友可以继续参阅本站其他前端相关专题，如有不足之处，欢迎留言指出。感谢朋友们对本站的支持！","categories":[{"name":"web前端","slug":"web","permalink":"https://ahjie.top/categories/web/"}],"tags":[{"name":"html","slug":"html","permalink":"https://ahjie.top/tags/html/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ahjie.top/tags/JavaScript/"},{"name":"css","slug":"css","permalink":"https://ahjie.top/tags/css/"}]},{"title":"随机图片API","slug":"web/imageAPI","date":"2020-10-16T16:26:58.317Z","updated":"2020-11-06T10:27:13.254Z","comments":true,"path":"web/imageAPI/","link":"","permalink":"https://ahjie.top/web/imageAPI/","excerpt":"","text":"# 💍 使用步骤如下: 本 API 只适合做背景图，详细请看下图，介绍在里面， # 💍 参数: json1type=json # 💍 json 调用格式 json1http://www.dmoe.cc/random.php?retum=json # 💍 jsons 数据 json123456&#123; &quot;code&quot;:&quot;200&quot; #图片状态码 &quot;acgurl&quot;:&quot;https:\\/\\/ws1.sinaimg.cn\\/large\\/0072Vf1pgy1foxkfy08umj31kw0w0nng.jpg&quot; //图片地址 &quot;width&quot;:&quot;2048&quot; //图片宽 &quot;height&quot;:&quot;1152&quot; #图片高&#125; html12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;images&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .row&#123; width: 500px; //方便测试效果 height: 900px; //方便测试效果 background: url(&quot;http://www.dmoe.cc/random.php&quot;) &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; //第一种 &lt;div class=&quot;row&quot;&gt;&lt;/div&gt; //第二种 &lt;img src=&quot; http://www.dmoe.cc/random.php&quot;&gt; &lt;/body&gt; &lt;/html&gt; 随机图片 https://uploadbeta.com/api/pictures/random 这个 API 的图片是其他类型列如风景或其他的一些图片 # 💍 以上就是两个 API 的使用方式，如果那里有不足之处请下方评论，我会及时纠正错误，有其他相关内容请收藏 “码坑的博客”，谢谢！","categories":[{"name":"web前端","slug":"web","permalink":"https://ahjie.top/categories/web/"}],"tags":[{"name":"html","slug":"html","permalink":"https://ahjie.top/tags/html/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ahjie.top/tags/JavaScript/"},{"name":"css","slug":"css","permalink":"https://ahjie.top/tags/css/"}]},{"title":"Java中的数组排序","slug":"java/sort","date":"2020-10-15T12:08:10.455Z","updated":"2020-12-10T05:34:03.439Z","comments":true,"path":"java/sort/","link":"","permalink":"https://ahjie.top/java/sort/","excerpt":"","text":"# 💍 冒泡排序 基本思想: 冒泡排序法：顾名思义，从下到上，两两进行比较，越小的越往上，从而形成由小到大的排序。冒泡排序的基本思想是对比相邻的原始值，如果满足条件就交换元素值，把较小的元素移到数组前面，把大的元素移动到数组的后面，这样较小的元素就像气泡从底部上升到顶部。 JAVA1234567891011121314151617181920212223242526272829303132class Demo &#123; public static void main(String[] args) &#123; int[] arr1 = &#123;3, 22, 5, 3, 66, 2, 9&#125;; sort1(arr1); //使用foreach循环输出 for (int x : arr1) &#123; System.out.println(x + &quot; &quot;); &#125; //使用字符串表达形式输出，输出形式更为直观 System.out.println(Arrays.toString(arr)); &#125; public static void sort1(int[] arr1) &#123; int temp; //根据角标进行比较， for (int i = 0; i &lt; arr1.length; i++) &#123; //j是数组的最后一个角标 for (int j = arr1.length - 1; j &gt; i; j--) &#123; if (arr1[j] &lt; arr1[j - 1]) &#123; //从后往前进行比较，小数往前，一轮之后最小数就在最前面了 temp = arr1[j - 1]; arr1[j - 1] = arr1[j]; arr1[j] = temp; &#125; &#125; &#125; &#125;&#125; # 💍 调用 Arrays.sort 类方法进行排序 网上一些说法 快速排序主要是对哪些基本类型数据（int,short,long 等）排序， 而合并排序用于对对象类型进行排序。 使用不同类型的排序算法主要是由于快速排序是不稳定的，而合并排序是稳定的。这里的稳定是指比较相等的数据在排序之后仍然按照排序之前的前后顺序排列。对于基本数据类型，稳定性没有意义，而对于对象类型，稳定性是比较重要的，因为对象相等的判断可能只是判断关键属性，最好保持相等对象的非关键属性的顺序与排序前一直；另外一个原因是由于合并排序相对而言比较次数比快速排序少，移动（对象引用的移动）次数比快速排序多，而对于对象来说，比较一般比移动耗时。 补充一点合并排序的时间复杂度是 nlogn, 快速排序的平均时间复杂度也是 nlogn，但是合并排序的需要额外的 n 个引用的空间 …… JAVA123456789101112131415161718192021222324252627282930class Demo &#123; public static void main(String[] args) &#123; // 第一种 int[] arr2 = &#123;0,3,4,6,8,9,2,5,1,7&#125;; Arrays.sort(arr2); for(int i = 0; i &lt; arr2.length ; i++)&#123; System.out.print(arr2[i]+&quot; &quot;); &#125; // 第二种调用本类方法实现 int[] arr2 = &#123;89,59,12,36,45,0,6,1,3,2&#125;; Arrays.sort(arr2); for (int i = 0; i &lt;arr2.length ; i++) &#123; System.out.print(arr2[i]+&quot; &quot;); &#125; sort2(arr2); &#125; // 第三种 int[] arr = &#123;4, 3, 5, 1, 2, 9, 3, 0&#125;; Arrays.sort(arr, 1, 4); for (int i = 0; i &lt; arr.length; i++) &#123; System.out.print(arr[i] + &quot;,&quot;); &#125; public static void sort2(int[] arr2) &#123; //第二种调用本类方法实现 &#125;&#125; # 💍 选择排序 基本思想: 直接选择排序的基本思想是将指定排序位置与其他数组元素分别对比，如果满足条件就交换元素值，指定这里区别冒泡排序，不是交换相邻元素，而是把满足条件的元素与指定的排序位置交换（如果最后一个元素开始排序，第一步就是将数组中的最大数值与数组最后一位交换位置，以此类推），这样排序好的位置就会逐渐扩大，最好整个数组都成为已经排序好的格式。 JAVA12345678910111213141516171819202122class Demo &#123; public static void main(String[] args) &#123; sort(); &#125; public static void sort() &#123; int[] arr3 = new int[]&#123;45, 23, 15, 89, 68, 12, 0, 1, 3, 2&#125;; // int temp = 0; for (int i = 0; i &lt; arr3.length; i++) &#123; for (int j = i + 1; j &lt; arr3.length; j++) &#123; if (arr3[i] &gt; arr3[j]) &#123; int temp = arr3[i]; arr3[i] = arr3[j]; arr3[j] = temp; &#125; &#125; &#125; for (int i = 0; i &lt; arr.length; i++) &#123; System.out.print(arr[i] + &quot; &quot;); &#125; &#125;&#125; # 💍 总结 # 💍 以上就是本文关于 Java 中的数组排序代码详解的全部内容，希望对大家有所帮助。感兴趣的朋友可以继续参阅本站其他 Java 相关专题，如有不足之处，欢迎留言指出。感谢朋友们对本站的支持！","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"},{"name":"java基础","slug":"java/java基础","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"Docker安装部署","slug":"java/docker","date":"2020-08-27T15:39:38.159Z","updated":"2020-12-04T09:38:32.149Z","comments":true,"path":"java/docker/","link":"","permalink":"https://ahjie.top/java/docker/","excerpt":"","text":"# 💍 前言 从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。 Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。 Docker 官方建议要 CentOS7.0 及以上系统版本，本文介绍 Docker CE 在 CentOS 下的安装使用。 # 💍 1. 前提条件 # 💍 1.1. 内核 Docker 运行对内核要求比较高，因此一般建议直接在 Ubuntu 这样的平台运行。但作为一个容器标准，Docker 也是支持其他如 CentOS, Mac OS X, Windows 等平台。目前 Docker 支持以下版本 CentOS: CentOS 7 (64 位) CentOS 6.5 (64 位) 及以后 在运行 CentOS 6.5 及以后版本时，需要内核版本 &gt;=2.6.32-431，因为这些内核包含了运行 Docker 的一些特定修改。 Yaml12$ uname -r2.6.32-431.17.1.el6.x86_64 注：网上很多教程说 CentOS6.5 必须要升级内核到 3.10 才能使用 docker，其实是【可选】升级，但最好升级。 # 💍 1.2.Device Mapper Docker 默认使用 AUFS 作为存储驱动，但是 AUFS 并没有被包括在 Linux 的主线内核中。CentOS 中可以使用 Device Mapper 作为存储驱动，这是在 2.6.9 内核版本引入的新功能。我们需要先确认是否启用该功能: Bash12$ ls -l /sys/class/misc/device-mapperlrwxrwxrwx 1 root root 0 May 1 20:55 /sys/class/misc/device-mapper -&gt; ../../devices/virtual/misc/device-mapper 如果没有检测到 Device Mapper，需要安装 device-mapper 软件包: Bash1$ sudo yum install -y device-mapper 然后重新加载 dm_mod 内核模块: Bash1$ sudo modprobe dm_mod # 💍 2. 安装 # 💍 2.2.1. 准备 CentOS7 能上外网 yum -y install gcc yum -y install gcc-c++ 卸载旧版本 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine 如果 yum 报告未安装任何这些软件包，这表示情况正常。 # 💍 2.2.2. 安装 安装依赖包 Yaml1yum install -y yum-utils device-mapper-persistent-data lvm2 设置 stable 镜像仓库 Yaml123yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo或yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新 yum 软件包索引 Yaml1yum makecache fast 如果这是自添加 Docker 镜像仓库以来您首次刷新软件包索引，系统将提示您接受 GPG 密钥，并且将显示此密钥的指纹。验证指纹是否正确，并且在正确的情况下接受此密钥。指纹应匹配 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 安装 docker 安装指定版本 Yaml1yum list docker-ce.x86_64 --showduplicates | sort -r #从高到低列出Docker-ce的版本 该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。 例如：指定版本（docker-ce-18.09.9）进行安装 Yaml1234yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io# 例如：yum install docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io # 💍 安装最新版本： Yaml1yum -y install docker-ce 启动 docker 执行以下命令启动 docker： Yaml1systemctl start docker 测试 docker 2.2.CentOS 6.5 # 💍 2.2.1. 准备 禁用 selinux [可选] 由于 Selinux 和 LXC 有冲突，所以需要禁用 selinux. 编辑 /etc/selinux/config, 设置两个关键变量. SELINUX=disabled SELINUXTYPE=targeted 注：网上有教程说要设置，但我建议不要设置，因为会影响安全性 安装 Fedora EPEL 源 Bash1yum install http://ftp.riken.jp/Linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm 添加 hop5.repo 源 Bash12cd /etc/yum.repos.dwget http://www.hop5.in/yum/el6/hop5.repo # 2.2.2.yum 安装 升级带 aufs 模块的 3.10 内核【可选】 Bash123456789101112yum install kernel-ml-aufs kernel-ml-aufs-devel``` 修改grub的主配置文件/etc/grub.conf，设置default=0，表示第一个title下的内容为默认启动的kernel（一般新安装的内核在第一个位置）：![](https://shitu-query-gz.gz.bcebos.com/2020-08-28/01/8787f7baffc1d2c7?authorization=bce-auth-v1%2F7e22d8caf5af46cc9310f1e3021709f3%2F2020-08-28T01%3A07%3A30Z%2F300%2Fhost%2Ff45db2d0ee924eec42ee7e01b707c67e15d01884c4212369dde2a4d1439ec9c0)&lt;font style=&quot;color:red&quot;&gt;重启系统 reboot now，&lt;/font&gt;然后执行以下命令查看是否已经是3.10内核：``` bash Bash[root@localhost ~]# uname -r3.18.5-3.el6.x86_64 Bash12[root@localhost ~]# grep aufs /proc/filesystemsnodev aufs 安装 docker 安装依赖： Yaml123yum install redhat-lsbyum install device-mapper-libsyum install libcgroup* 如出现以下错误： 解决办法是编辑 /etc/yum.repos.d/epel.repo，把基础的恢复 (baseurl)，镜像 (mirrorlist) 的地址注释掉： 安装 docker： Yaml1yum install docker-io 如出现以下报错： Bash1Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again 解决办法是编辑 /etc/yum.repos.d/epel.repo，把基础的恢复 (baseurl)，镜像 (mirrorlist) 的地址注释掉： 如出现如下错误： 原因是：网络问题，下载失败。解决办法：则执行多几次 yum install docker-io 命令，直至下载并安装成功（我这里耗时 1 个多小时）。 继续安装，如出现以下信息，则说明能正常安装： 启动 docker 执行以下命令启动 docker： Yaml1service docker start 如出现以上提示则说明安装并启动成功。 如出现以下提示则说明安装失败： 解决方法：执行以下命令删除 docker-io Yaml1sudo yum remove docker-io 执行以下命令手工安装 docker： Bash12rpm -ivh ./docker-engine-1.7.1-1.el6.x86_64.rpm 注：安装包下载地址：https://yum.dockerproject.org/repo/main/centos/6/Packages/ 再次执行以下命令启动 docker： Yaml1service docker start 【可选】设置在服务器启动时启动: Yaml1chkconfig docker on # 3. 使用 查看 docker 版本 Yaml1docker version 查看 docker 日志 Yaml1cat /var/log/docker 搜索镜像 Yaml1docker search tomcat 注：start 代表受欢迎程度。OFFICIAL 代表官方版本 查看当前所有镜像 Yaml1docker images 下载镜像 Yaml1docker pull centos 运行容器 Yaml1docker run centos echo &quot;hello word&quot; 运行容器 hello word Yaml1docker run hello-world 输出这段提示以后，hello world 就会停止运行，容器自动终止。 # 💍 4. 删除 可以使用 yum 来删除 docker 查询删除 docker 列出 docker 包的具体的名字 Yaml1234$ sudo yum list installed | grep dockercontainerd.io.x86_64 1.2.4-3.1.el7 docker-ce.x86_64 3:18.09.3-3.el7docker-ce-cli.x86_64 1:18.09.3-3.el7 删除 docker Yaml123$ sudo yum -y remove containerd.io.x86_64 \\ docker-ce.x86_64 \\ docker-ce-cli.x86_64 直接删除 docker Yaml123456789sudo yum remove docker \\ docker-io \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 备注：以上命令只会删除 docker 运行环境，并不会删除镜像，容器，卷文件，以及用户创建的配置文件。 清除镜像和容器文件： Yaml1sudo rm -rf /var/lib/docker 手动查找并删除用户创建的配置文件 # 💍 5. 注意 # 💍 5.1. 手动挂载 cgroup 低版本的 Redhat (6.3) 可能要手动挂载 cgroup，具体操作方法如下： 首选禁用 cgroup 对应服务 cgconfig Yaml12345678service cgconfig stop # 关闭服务 chkconfig cgconfig off # 取消开机启动``` - 然后挂载cgroup,可以命令行挂载```yaml Yamlmount -t cgroup none /cgroup #仅本次有效 或者修改配置文件，编辑 /etc/fstab, 加入 none /cgroup cgroup defaults 0 0 # 💍 5.2. 以非 root 用户管理 docker Docker 守护程序绑定到 Unix socket 而不是 TCP 端口。默认情况下，Unix socke 是 root 用户才有，而其他用户只能通过使用 sudo 使用它。Docker 守护程序始终以 root 用户身份运行。 如果您不想在 docker 命令前加上 sudo，请创建一个名为 docker 的 Unix 组并向其添加用户。当 Docker 守护程序启动时，它会创建一个可由该 docker 组成员访问的 Unix socket。 1. 创建 docker 组 Yaml1sudo groupadd docker 2. 添加 user 到 docker 组 Yaml1sudo usermod -aG docker $USER 请将 $USER 替换为系统中你的除 root 外的某个用户。 3. 注销并重新登录，以便重新评估您的组成员身份。 如果在虚拟机上进行测试，则可能需要重新启动虚拟机才能使更改生效。 4. 验证是否可以通过不使用 sudo 运行 docker 命令。 Yaml1docker run hello-world 如果最初在添加用户到 docker 组之前，使用的是 sudo 的 Dokcer CLI 命令。你可能会出现如下错误，表明你的～/.docker 目录由于 sudo 命令而创建的权限不正确。 Yaml12WARNING: Error loading config file: /home/user/.docker/config.json -stat /home/user/.docker/config.json: permission denied 要解决此问题，请删除～/.docker/ 目录（它会自动重新创建，但任何自定义设置都会丢失），或使用以下命令更改其所有权和权限： Yaml12$ sudo chown &quot;$USER&quot;:&quot;$USER&quot; /home/&quot;$USER&quot;/.docker -R$ sudo chmod g+rwx &quot;$HOME/.docker&quot; -R # 💍 5.3. 镜像加速 鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。 Docker 国内镜像： 网易加速器：http://hub-mirror.c.163.com 官方中国加速器：https://registry.docker-cn.com ustc 的镜像：https://docker.mirrors.ustc.edu.cn 也可使用私人镜像加速器地址，如使用阿里云的镜像加速器：登录阿里云 -&gt; 产品 -&gt; 搜索 &quot;容器镜像服务&quot;-&gt; 镜像库 -&gt; 镜像加速器。 新版的 Docker 使用 /etc/docker/daemon.json（Linux） 来配置 Daemon。 请在该配置文件中加入（没有该文件的话，请先建一个）： Json1234vi /etc/docker/daemon.json &#123; &quot;registry-mirrors&quot;: [&quot;https://hub-mirror.c.163.com&quot;] &#125; 配置成功后，CentOS6.5 重启： Yaml1service docker restart 配置成功后，CentOS7 重启： Yaml12345systemctl daemon-reload #重启加速配置文件systemctl restart docker #重启docker后台服务systemctl docker statle #开启docker服务systemctl docker stop #关闭docker服务 下棋给大家说一下在 docker 上安装 mysql 数据库并且映射端口号外部进行连接 如哪里错误请指点出来，大家一起讨论学习 # 💍 各位有问题也可以搜索微信公众号” 码坑” 私信我，大家一起讨论学习。","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ahjie.top/tags/Docker/"}]},{"title":"Maven的安装及配置","slug":"java/Maven安装配置","date":"2020-08-25T14:19:12.817Z","updated":"2020-12-04T09:38:51.075Z","comments":true,"path":"java/Maven安装配置/","link":"","permalink":"https://ahjie.top/java/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","excerpt":"","text":"# 💍安装本地 Maven Maven 下载地址:https://maven.apache.org/download.cgi 点击箭头所指的链接进行下载 下载好了以后解压到你要存储的盘符，我存放地址是 # 💍 环境变量 系统变量：MAVEN_HOME = F:\\dev\\apache-maven-3.6.1 系统变量:path = % MAVEN_HOME%\\bin MAVEN_HOME: path: # 💍 然后 win+R 运行 cmd 输入 mvn -version，如图所示则配置成功 # 💍 配置 settings 文件 在 F:\\dev\\apache-maven-3.6.1\\conf 下可以找到 settings 文件，打开 (嫌麻烦的直接看最后一步) 找到第 52 行，这里是 maven 默认的仓库 # 💍 我们复制第 53 行 Xml1&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; 将它拿到注释外并将中间的内容改成你需要的路径，如图 Xml1&lt;localRepository&gt;F:/repository&lt;/localRepository&gt; 这里的路径随便设置，注意这里是正斜杠 因为国外的服务器下载 jar 包很慢所以我们改为阿里云服务器 （大约在 150 行左右），这两个仓库只用选一个 (根据大家反馈建议使用第一个，第二个在有的版本可能会出现 warning) Xml123456789101112131415&lt;!-- 阿里云仓库 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt; &lt;/mirror&gt; 或者 &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; # 💍 如图，要夹在两个 mirrors 标签之间 # 💍 在最后配置 jdk，也要夹在两个 profiles 标签之间 Xml123456789101112131415&lt;!-- java版本 --&gt; &lt;profile&gt; &lt;id&gt;jdk-1.8&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt;&lt;/profile&gt; 配置完成，在命令行输入 mvn help:system 测试，看到下载链接里面是 ailiyun 的链接表示配置成功嫌麻烦的直接复制配置文件的内容即可，不过路径还是要改 Xmllt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements. See the NOTICE filedistributed with this work for additional informationregarding copyright ownership. The ASF licenses this fileto you under the Apache License, Version 2.0 (the&quot;License&quot;); you may not use this file except in compliancewith the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied. See the License for thespecific language governing permissions and limitationsunder the License.--&gt;&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This settings.xml file provides configuration for a single user, | and is normally provided in $&#123;user.home&#125;/.m2/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -s /path/to/user/settings.xml | | 2. Global Level. This settings.xml file provides configuration for all Maven | users on a machine (assuming they&#x27;re all using the same Maven | installation). It&#x27;s normally provided in | $&#123;maven.conf&#125;/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt;&lt;localRepository&gt;F:/repository&lt;/localRepository&gt; &lt;!-- interactiveMode | This will determine whether maven prompts you when it needs input. If set to false, | maven will use a sensible default value, perhaps based on some other setting, for | the parameter in question. | | Default: true &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; --&gt; &lt;!-- offline | Determines whether maven should attempt to connect to the network when executing a build. | This will have an effect on artifact downloads, artifact deployment, and others. | | Default: false &lt;offline&gt;false&lt;/offline&gt; --&gt; &lt;!-- pluginGroups | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e. | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list. |--&gt; &lt;pluginGroups&gt; &lt;!-- pluginGroup | Specifies a further group identifier to use for plugin lookup. &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt; --&gt; &lt;/pluginGroups&gt; &lt;!-- proxies | This is a list of proxies which can be used on this machine to connect to the network. | Unless otherwise specified (by system property or command-line switch), the first proxy | specification in this list marked as active will be used. |--&gt; &lt;proxies&gt; &lt;!-- proxy | Specification for one proxy, to be used in connecting to the network. | &lt;proxy&gt; &lt;id&gt;optional&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;username&gt;proxyuser&lt;/username&gt; &lt;password&gt;proxypass&lt;/password&gt; &lt;host&gt;proxy.host.net&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt; &lt;/proxy&gt; --&gt; &lt;/proxies&gt; &lt;!-- servers | This is a list of authentication profiles, keyed by the server-id used within the system. | Authentication profiles can be used whenever maven must make a connection to a remote server. |--&gt; &lt;servers&gt; &lt;!-- server | Specifies the authentication information to use when connecting to a particular server, identified by | a unique name within the system (referred to by the &#x27;id&#x27; attribute below). | | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are | used together. | &lt;server&gt; &lt;id&gt;deploymentRepo&lt;/id&gt; &lt;username&gt;repouser&lt;/username&gt; &lt;password&gt;repopwd&lt;/password&gt; &lt;/server&gt; --&gt; &lt;!-- Another sample, using keys to authenticate. &lt;server&gt; &lt;id&gt;siteServer&lt;/id&gt; &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt; &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt; &lt;/server&gt; --&gt; &lt;/servers&gt; &lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt; &lt;!-- mirror &lt;mirrors&gt; | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; --&gt; &lt;!-- 阿里云仓库 --&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt;&lt;/mirrors&gt; &lt;!-- profiles | This is a list of profiles which can be activated in a variety of ways, and which can modify | the build process. Profiles provided in the settings.xml are intended to provide local machine- | specific paths and repository locations which allow the build to work in the local environment. | | For example, if you have an integration testing plugin - like cactus - that needs to know where | your Tomcat instance is installed, you can provide a variable here such that the variable is | dereferenced during the build process to configure the cactus plugin. | | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles | section of this document (settings.xml) - will be discussed later. Another way essentially | relies on the detection of a system property, either matching a particular value for the property, | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;. | Finally, the list of active profiles can be specified directly from the command line. | | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact | repositories, plugin repositories, and free-form properties to be used as configuration | variables for plugins in the POM. | |--&gt; &lt;!-- profile &lt;profiles&gt; | Specifies a set of introductions to the build process, to be activated using one or more of the | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt; | or the command line, profiles have to have an ID that is unique. | | An encouraged best practice for profile identification is to use a consistent naming convention | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc. | This will make it more intuitive to understand what the set of introduced profiles is attempting | to accomplish, particularly when you only have a list of profile id&#x27;s for debug. | | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo. &lt;profile&gt; &lt;id&gt;jdk-1.4&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;1.4&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jdk14&lt;/id&gt; &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt; &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; --&gt; &lt;!-- | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;, | which provides a specific path to the Tomcat instance. To use this, your plugin configuration | might hypothetically look like: | | ... | &lt;plugin&gt; | &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt; | &lt;artifactId&gt;myplugin&lt;/artifactId&gt; | | &lt;configuration&gt; | &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt; | &lt;/configuration&gt; | &lt;/plugin&gt; | ... | | NOTE: If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to | anything, you could just leave off the &lt;value/&gt; inside the activation-property. | &lt;profile&gt; &lt;id&gt;env-dev&lt;/id&gt; &lt;activation&gt; &lt;property&gt; &lt;name&gt;target-env&lt;/name&gt; &lt;value&gt;dev&lt;/value&gt; &lt;/property&gt; &lt;/activation&gt; &lt;properties&gt; &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt; &lt;/properties&gt; &lt;/profile&gt; --&gt;&lt;profiles&gt;&lt;profile&gt; &lt;id&gt;jdk-1.8&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt;&lt;/profile&gt;&lt;/profiles&gt; &lt;!-- activeProfiles | List of profiles that are active for all builds. | &lt;activeProfiles&gt; &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt; &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt; &lt;/activeProfiles&gt; --&gt;&lt;/settings&gt; # 💍 各位有问题也可以搜索微信公众号” 码坑” 私信我，大家一起讨论学习。","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"https://ahjie.top/tags/Maven/"}]},{"title":"pom.xml的标签报错 Element ‘project‘ cannot have character [children], because the type‘s content**","slug":"java/pom报错","date":"2020-08-25T13:45:50.197Z","updated":"2020-12-10T05:29:51.589Z","comments":true,"path":"java/pom报错/","link":"","permalink":"https://ahjie.top/java/pom%E6%8A%A5%E9%94%99/","excerpt":"","text":"CSDN 地址:https://blog.csdn.net/qq_44841432/article/details/107768197 # 💍 pom.xml 的报错 JAVA12345//首先看到的报错的标签&lt;project&gt;..............&lt;/project&gt; 其实这个错误的来源是某些编译器导致的，比如现在我们常用的开发工具 -&gt;IDEA -&gt;Eclipse, 这个两种工具，其中 IDEA 他的弊端在于有时候导致明明写对的代码报错出现红杠， 这个也是编译器导致的，当然这种情况不会频繁的出现，只是偶尔出现，对比起来这个两个工具 IDEA 的好用些，代码提示功能强大，也不同自己去导 jar 包，也大大的提升了开发的效率. # 💍 解决方法 把 pom.xml 文件里面的代码全选复制粘贴到一个外部工具上，这里推荐 Notepad++，复制到 Notepad++ 上面以后把无效的空格删除，删除以后呢在复制粘贴到 IDEA 中，这样就可以解决的报错. # 💍 各位有问题也可以搜索微信公众号” 码坑” 私信我，大家一起讨论学习。","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"React.js与Vue.js流行框架的比较","slug":"web/react和vue","date":"2020-08-21T12:33:25.646Z","updated":"2020-10-31T10:16:52.128Z","comments":true,"path":"web/react和vue/","link":"","permalink":"https://ahjie.top/web/react%E5%92%8Cvue/","excerpt":"JavaScript 是世界上最流行的语言之一，React 和 Vue 是 JS 最流行的两个框架。但哪一款最适合你？ JavaScript 越来越受欢迎，许多科技巨头正在从中获益。每天都会出现大量的框架和语言，我们无法跟上所有这些框架和语言的步伐。很难确定哪些值得关注。 JavaScript 的世界正以前所未有的速度和作为软件开发的公司，我们无法承受忽视这个时代的讨论最多的框架 - React.js 和 Vue.js。因此，在 React 与 Vue 的比较中，我们将根据每个框架的重要优缺点，以及市场趋势和见解，帮助您选择最佳框架。我们拥有一批技术娴熟的开发人员，他们可以随时了解 Vue.js 和 React 开发的各个方面。 # 💍 让我们深入了解细节： 在进一步阅读之前，请确保您清楚地了解 React 和 Vue.js 是什么。它们是高度重视且广泛使用的 JavaScript 框架，用于界面设计。","text":"JavaScript 是世界上最流行的语言之一，React 和 Vue 是 JS 最流行的两个框架。但哪一款最适合你？ JavaScript 越来越受欢迎，许多科技巨头正在从中获益。每天都会出现大量的框架和语言，我们无法跟上所有这些框架和语言的步伐。很难确定哪些值得关注。 JavaScript 的世界正以前所未有的速度和作为软件开发的公司，我们无法承受忽视这个时代的讨论最多的框架 - React.js 和 Vue.js。因此，在 React 与 Vue 的比较中，我们将根据每个框架的重要优缺点，以及市场趋势和见解，帮助您选择最佳框架。我们拥有一批技术娴熟的开发人员，他们可以随时了解 Vue.js 和 React 开发的各个方面。 # 💍 让我们深入了解细节： 在进一步阅读之前，请确保您清楚地了解 React 和 Vue.js 是什么。它们是高度重视且广泛使用的 JavaScript 框架，用于界面设计。 # 💍 什么是 React？它为什么如此受欢迎？ React 得到了 Facebook 社区的支持，使得构建交互式 UI 非常容易。 # 💍 React 不是 MVC 框架 市场上有许多 JavaScript MVC 框架在性能和可靠性方面做得相当不错。那么，为什么 React 如此受欢迎？为什么有人会使用 React 而不是依赖其他一些 MVC 框架？ React 是一个用于创建可重用且有吸引力的 UI 组件的库。它非常适合代表经常变化的数据的组件。使用 React，您可以通过将它们分解为组件而不是使用模板或 HTML 来构建可重用的用户界面。 # 💍 学习一次，随处写作 React 的官方网站提到了这个关键功能，它说你可以使用 React Native 框架在 JavaScript 中构建移动应用程序。 React 还介绍了 JavaScript XML 或 JSX 的使用，它是 JavaScript 的语法扩展。React 不一定需要 JSX，但它在创建 UI 组件和调试时非常简单有用。 # 💍 使用 React.js 的公司 Facebook，Instagram，Netflix，纽约时报，雅虎，WhatsApp，Codecademy，Dropbox，Airbnb，Asana，微软 # 💍 Vue.js 简介：渐进式 JavaScript 框架 React 和 Angular 是用于构建 Web 应用程序的两个顶级 JavaScript 框架。 Vue.js 是一个开源 JavaScript 框架，能够开发单页面应用程序。它还可以用作 Web 应用程序框架，旨在简化 Web 开发。Vue.js 应用程序开发引起了全球开发人员的极大关注，以构建令人惊叹的 Web 应用程序。 Vue 或 Vue.js 是一个用于为 Web 构建引人注目的 UI 的渐进式框架。它最初于 2014 年由前 Google 开发人员 Evan You 发布，他使用 AngularJS 并决定排除 Angular 框架的痛点并构建轻量级的东西。 它的流行有很多原因，其中一个关键原因是它能够在没有任何动作的情况下重新渲染。它允许您构建可重用，小巧但功能强大的组件，因此，它提供了一个可组合的框架，允许您在需要时添加组件。 # 💍 使用 Vue.js 的公司 Bash1Facebook，Netflix，Adobe，Grammarly，Behance，小米，阿里巴巴，Codeship，Gitlab和Laracasts # 💍 React.js vs Vue.js：谁赢了这场战斗？ 这两个框架之间有许多相似之处，例如： 两者都是为了与根库一起使用而构建的。 React.js 和 Vue.js 基于 Virtual DOM 模型。 这两种工具都具有基于组件的结构。 当然，这两种工具之间存在差异。每个框架都有自己的优点和缺点需要考虑。让我们一个一个地看看每个框架。 # 💍 React.js 的优点： 灵活性和响应性：它提供最大的灵活性和响应能力。 虚拟 DOM：由于它基于文档对象模型，因此它允许浏览器友好地以 HTML，XHTML 或 XML 格式排列文档。 丰富的 JavaScript 库：来自世界各地的贡献者正在努力添加更多功能。 可扩展性：由于其灵活的结构和可扩展性，React 已被证明对大型应用程序更好。 不断发展： React 得到了 Facebook 专业开发人员的支持，他们不断寻找改进方法。 Web 或移动平台： React 提供 React Native 平台，可通过相同的 React 组件模型为 iOS 和 Android 开发本机呈现的应用程序。 无论是 Web 还是本机移动开发，React 都是大多数用户界面设计平台的理想选择。 # 💍 React.js 的缺点： 陡峭的学习曲线：由于复杂的设置过程，属性，功能和结构，它需要深入的知识来构建应用程序。 现在，让我们转到 Vue.js 并谈谈它的优点和缺点： 与 React 相比，Vue.js 的下载量更少，并且主要用于构建有吸引力的单页面应用程序和 Web 应用程序。但是，Vue.js 具有适应性强的体系结构，使其成为广泛使用的框架之一，具有最新的库和包。 # 💍 使用 Vue.Js 的优点 易于使用： Vue.js 包含基于 HTML 的标准模板，可以更轻松地使用和修改现有应用程序。 更顺畅的集成：无论是单页应用程序还是复杂的 Web 界面，Vue.js 都可以更平滑地集成更小的部件，而不会对整个系统产生任何影响。 更好的性能，更小的尺寸：它占用更少的空间，并且往往比其他框架提供更好的性能。 精心编写的文档：通过详细的文档提供简单的学习曲线，无需额外的知识；HTML 和 JavaScript 将完成工作。 适应性：整体声音设计和架构使其成为一种流行的 JavaScript 框架。它提供无障碍的迁移，简单有效的结构和可重用的模板。 # 💍 使用 Vue.js 的缺点 与 Angular 和 React 相比，Vue.js 框架的市场份额仍然很小。它正在快速流行，但与此同时，在使用 Vue.js 时，可能会出现大规模应用程序开发方面的问题。 好吧，考虑到其现代功能，速度和灵活性，Vue.js 有可能实现 Web 应用程序开发的里程碑。 # 💍 两个框架的深入比较 # 💍 重新渲染和优化 当你比较 React 和 Vue 时，速度不能成为决定哪个更好的重要比较因素。在性能方面，让我们考虑重新渲染功能。当组件的状态发生变化时，React 的机制会触发整个组件树的重新呈现。您可能需要使用额外的属性来避免不必要地重新渲染子组件。 虽然 Vue 的重新渲染功能是开箱即用的，但 Vue 提供了优化的重新渲染，其中系统在渲染过程中跟踪依赖关系并相应地工作。 重新渲染 Vue 是最显着的特征，使其成为全世界开发人员广泛接受的框架。 # 💍 JSX 与 HTML React 使用 JSX - 一种声明性 JavaScript XML，允许开发人员利用 JavaScript 的强大功能编写组件，而 Vue.js 使用 HTML 模板创建视图。 基于 HTML 的模板更加熟悉，在改进现有应用程序以获得 Vue 反应性功能的好处方面也是有益的。这为初学者和有经验的专业人士提供了一个简单的学习曲线，因为他们中的大多数人都以这种或那种方式使用 HTML。 # 💍 路由和状态管理解决方案 在像 React 和 Vue 这样的基于组件的框架中，当您开始扩展应用程序时，需要更加关注状态管理和数据流。这是因为有许多组件相互交互并共享数据。 在这种情况下，React 提供了一种称为 Flux / Redux 架构的创新解决方案，它代表单向数据流，是着名 MVC 架构的替代方案。现在，如果我们考虑 Vue.js 框架，就会有一个名为 Vuex 的更高级架构，它集成到 Vue 中并提供无与伦比的体验。 # 💍 建筑工具 React 和 Vue 都有一个非常好的开发环境。只需很少或没有配置，您就可以创建应用程序，使您能够使用最新的实践和模板。在 React 中，有一个 Create React App（CRA），在 Vue 中，它是 vue-cli。 这两种引导工具都倾向于为您提供舒适灵活的开发环境，并为您提供开始编码的出色起点。 # 💍 跨平台应用程序开发：谁是赢家？ 跨平台应用程序开发已经广泛流行，两个框架都在竞相提供卓越的跨平台应用程序开发体验。React 的 React Native 是一个成熟且广泛使用的本机渲染应用程序平台。另一方面，Vue 的 Weex 仍在不断发展，旨在为 iOS 和 Android 创建应用程序提供流畅的开发体验。 # 💍 何时使用 Vue.js Over React 如果您想要一个轻量级，更快速，更现代的 UI 库来制作一流的 SPA（单页面应用程序），您应该选择 Vue.js. 对于习惯使用 HTML 的开发人员来说，这是有利的。此外，它还提供了组件的可重用性，使其成为开发人员在 Web 应用程序中构建无与伦比的用户体验的选择。 # 💍 何时选择 React Over Vue.js 当你是 JavaScript 的粉丝！React 拥有一个成熟且规模更大的专业开发团队，致力于使其更先进。React 由 Facebook 提供支持，其中包含许多用例，解决方案，资源和项目。此外，由于成熟的用户群，React 适用于大规模应用程序和移动应用程序。很明显，如果您想使用 JavaScript 构建移动应用程序，React Native 绝对是您的选择。 但是，要么是构建现代 JavaScript 应用程序的一个很好的选择，它高度依赖于团队，应用程序大小和可行的方法。 以下是整个评估的快速概述： # 💍 在以下场景中，Vue 比反应更好： 最新文档和更简单的语法。 更小，更快，更灵活。 丰富的 HTML 模板，易于开发。 # 💍 React 比 Vue.js 好： 需要构建移动应用程序。 专业和出色的社区支持，以解决任何问题。 需要构建大型应用程序。 轻量级，易于版本迁移。 # 💍 快速 React.js 与 Vue.js 比较 # 💍 总结 无论您选择 React.js 还是 Vue.js，两个框架都没有相当大的差异，根据您的要求，这个决定是非常主观的。如果您想将前端 JavaScript 框架集成到现有应用程序中，Vue.js 是更好的选择，如果您想使用 JavaScript 构建移动应用程序，React 绝对是您的选择。 在这里，我们尽量不要偏向任何框架。如果我们遗漏任何可以使本文更全面有价值的重要观点或概念，您可以通过以下评论告诉我们！ 此文章是我个人从网上看到的，感觉还不错，所以发出来与大家共享","categories":[{"name":"web前端","slug":"web","permalink":"https://ahjie.top/categories/web/"},{"name":"react和vue","slug":"web/react和vue","permalink":"https://ahjie.top/categories/web/react%E5%92%8Cvue/"},{"name":"彩色文字","slug":"web/react和vue/彩色文字","permalink":"https://ahjie.top/categories/web/react%E5%92%8Cvue/%E5%BD%A9%E8%89%B2%E6%96%87%E5%AD%97/"},{"name":"光标动画","slug":"web/react和vue/彩色文字/光标动画","permalink":"https://ahjie.top/categories/web/react%E5%92%8Cvue/%E5%BD%A9%E8%89%B2%E6%96%87%E5%AD%97/%E5%85%89%E6%A0%87%E5%8A%A8%E7%94%BB/"}],"tags":[{"name":"React","slug":"React","permalink":"https://ahjie.top/tags/React/"},{"name":"Vue","slug":"Vue","permalink":"https://ahjie.top/tags/Vue/"}]},{"title":"hexo分类and标签404","slug":"Other-extensions/hexo","date":"2020-08-20T08:29:52.301Z","updated":"2021-09-04T14:22:58.926Z","comments":true,"path":"Other-extensions/hexo/","link":"","permalink":"https://ahjie.top/Other-extensions/hexo/","excerpt":"# 💍 404 分类 and 标签错误处理 突然发现博客中，部分分类打不开，点击出现 404，在标签中查看，也是小部分标签点击 404，但是在所有文章中该分类下的文章都能打开，后来发现这些 404 的标签或分类名都是后来修改过的，原先的名称开头是大写名称 将大写字母改成小写，hexo 部署正确，但是博客上还是不正确出现 404 网上查了许多资料，才发现，git 中设置了大小写不敏感","text":"# 💍 404 分类 and 标签错误处理 突然发现博客中，部分分类打不开，点击出现 404，在标签中查看，也是小部分标签点击 404，但是在所有文章中该分类下的文章都能打开，后来发现这些 404 的标签或分类名都是后来修改过的，原先的名称开头是大写名称 将大写字母改成小写，hexo 部署正确，但是博客上还是不正确出现 404 网上查了许多资料，才发现，git 中设置了大小写不敏感 # 💍 解决方法如下 修改 git 设置不忽略大小写 进入博客文件夹，进入 git 目录：.deploy_git ，修改 .git 文件中的配置文件 config，将 ignorecase=true 改为 ignorecase=false Yaml123vim . deploy_git/.git/configignorecase = false 如果还没有解决，清空部署到 github 上的文件，重新发布： Bash1234cd .deploy_gitgit rm -rf *git commit -m &#x27;clean all file&#x27;git push 进入博客文件夹，用 hexo 重新生成部署 Hexo123hexo cleanhexo g hexo d or hexo g -d 这些问题都是自己开始搭建博客的时候出现的一些问题，希望能够帮助到各位， 如果那里错误，请指点出来，大家一起讨论。","categories":[{"name":"其他扩展","slug":"Other-extensions","permalink":"https://ahjie.top/categories/Other-extensions/"},{"name":"hexo分类and标签404","slug":"Other-extensions/hexo分类and标签404","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/"},{"name":"特别的惊喜","slug":"Other-extensions/hexo分类and标签404/特别的惊喜","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E7%89%B9%E5%88%AB%E7%9A%84%E6%83%8A%E5%96%9C/"},{"name":"音乐网站","slug":"Other-extensions/hexo分类and标签404/特别的惊喜/音乐网站","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E7%89%B9%E5%88%AB%E7%9A%84%E6%83%8A%E5%96%9C/%E9%9F%B3%E4%B9%90%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ahjie.top/tags/Hexo/"}]},{"title":"JAVA的JDK安装步骤","slug":"java/java基础","date":"2020-08-20T07:50:41.096Z","updated":"2020-12-04T09:38:42.425Z","comments":true,"path":"java/java基础/","link":"","permalink":"https://ahjie.top/java/java%E5%9F%BA%E7%A1%80/","excerpt":"对于一个 JAVA 或 android 开发者来说，JDK 的安装是做任何事的前提。但现在有好多教程的 JDK 安装配置方法繁琐重复，容易误导新手，本教程可以说是最简单经典实用的配置方法。 # 💍 快速开始 # 💍步骤一 首先我们当然需要去 oracle 官网下载 JDK。 点击蓝色圈住的图片，选择相应版本并下载。x86 是 32 位版，64 是 64 位系统版。","text":"对于一个 JAVA 或 android 开发者来说，JDK 的安装是做任何事的前提。但现在有好多教程的 JDK 安装配置方法繁琐重复，容易误导新手，本教程可以说是最简单经典实用的配置方法。 # 💍 快速开始 # 💍步骤一 首先我们当然需要去 oracle 官网下载 JDK。 点击蓝色圈住的图片，选择相应版本并下载。x86 是 32 位版，64 是 64 位系统版。 # 💍 步骤二 下载完成后，双击运行，一路下一步，安装完成。 # 💍 步骤三 安装完 JDK 后，国际惯例配置环境变量。首先鼠标右键点击计算机–〉属性–〉高级系统设置 # 💍 步骤四 进入高级系统设置后，点击高级–〉环境变量 # 💍 步骤五 环境变量中看见 path 一项，点击 path，点击编辑。 # 💍 步骤六 在变量值的最前面，添加 C:\\Program Files\\Java\\jdk1.8.0_91\\bin 确定即可。 该路径为你的 jdk 安装好后的 bin 目录的路径，注意路径要放在双引号内，且结尾加封号。 # 💍 步骤七 如何验证是否安装成功，可以在 cmd 命令窗口中输入 javac 命令来查看。返回一大堆命令参数即可说明安装成功。怎么样，是不是很简单呢。","categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"}]},{"title":"利用html+javaSrcipt+css3实现光标动画","slug":"web/光标动画","date":"2020-08-19T15:24:27.295Z","updated":"2020-10-16T16:27:50.602Z","comments":true,"path":"web/光标动画/","link":"","permalink":"https://ahjie.top/web/%E5%85%89%E6%A0%87%E5%8A%A8%E7%94%BB/","excerpt":"这个案例也是通过 javaSrcipt (js) 实现，这个案例相对比较简单，先是整体的 HTML 代码结构，这个案例呢 javaSrcipt (js) 是直接写在我们 HTML 的内部， 没有通过外链的方式实现，因为代码量较少直接写在了整体结构之中，其实这个案例不仅仅是纯的 javaSrcipt (js) 代码，本案例只是利用了 javaSrcipt (js) 的一个时间来控制光标闪动的时间而已，而我们的 CSS3 样式呢，主要是让文字颜色，利用 background 使文字产生渐变的效果。","text":"这个案例也是通过 javaSrcipt (js) 实现，这个案例相对比较简单，先是整体的 HTML 代码结构，这个案例呢 javaSrcipt (js) 是直接写在我们 HTML 的内部， 没有通过外链的方式实现，因为代码量较少直接写在了整体结构之中，其实这个案例不仅仅是纯的 javaSrcipt (js) 代码，本案例只是利用了 javaSrcipt (js) 的一个时间来控制光标闪动的时间而已，而我们的 CSS3 样式呢，主要是让文字颜色，利用 background 使文字产生渐变的效果。 # 💍 详细代码如下 Html12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;光标动画&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; html,body&#123; height: 100%; overflow: hidden; background: black; text-align: center; &#125; h1&#123; margin-top: 50px; display: inline-block; color: rgba(255,255,255,.3); font:bold 80px &quot;微软雅黑&quot;; background: linear-gradient(120deg,rgba(255,255,255,0) 100px,rgba(255,255,255,1) 180px,rgba(255,255,255,0) 270px) no-repeat; -webkit-background-clip:text; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;欢迎来到阿杰的博客&lt;/h1&gt;&lt;/body&gt; &lt;/html&gt; # 💍 在插入以下 javaSrcipt (js) 代码 Js1234567891011&lt;script type=&quot;text/javascript&quot;&gt; var h1 = document.querySelector(&quot;h1&quot;); var flag = -160; setInterval(function()&#123; flag+=10; if(flag == 1100)&#123; flag = -160; &#125; h1.style.backgroundPosition = flag +&quot;px&quot;; &#125;,30); &lt;/script&gt; 这个案例的话只是简单的 javaSrcipt (js) 基础知识，希望可以对来到阿杰博客的朋友有所帮助如代码有问题，请指点出来，大家讨论一下，谢谢！","categories":[{"name":"web前端","slug":"web","permalink":"https://ahjie.top/categories/web/"}],"tags":[{"name":"html","slug":"html","permalink":"https://ahjie.top/tags/html/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ahjie.top/tags/JavaScript/"},{"name":"css","slug":"css","permalink":"https://ahjie.top/tags/css/"}]},{"title":"js文字闪动效果","slug":"web/彩色文字","date":"2020-08-19T14:17:37.253Z","updated":"2020-10-16T16:27:58.458Z","comments":true,"path":"web/彩色文字/","link":"","permalink":"https://ahjie.top/web/%E5%BD%A9%E8%89%B2%E6%96%87%E5%AD%97/","excerpt":"利用 javaSrcipt (js) 实现对文字的如跑马灯一样的效果。 # 💍 效果如下: var Tname=\"欢迎来到码坑的博客\"; var Tlen=Tname.length; document.write(\"\"+Tname+\"\"); var col=new Array(\"#4FFFF\",\"#3333FF\",\"#FFCC00\",\"chartreuse\",\"#FFCC00\",\"#CC33FF\"); var ic=0; function Dcolor(){ var Strname=\"\"; for (i=0;i","text":"利用 javaSrcipt (js) 实现对文字的如跑马灯一样的效果。 # 💍 效果如下: var Tname=\"欢迎来到码坑的博客\"; var Tlen=Tname.length; document.write(\"\"+Tname+\"\"); var col=new Array(\"#4FFFF\",\"#3333FF\",\"#FFCC00\",\"chartreuse\",\"#FFCC00\",\"#CC33FF\"); var ic=0; function Dcolor(){ var Strname=\"\"; for (i=0;i","categories":[{"name":"web前端","slug":"web","permalink":"https://ahjie.top/categories/web/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://ahjie.top/tags/JavaScript/"}]}],"categories":[{"name":"JAVA后端开发","slug":"java","permalink":"https://ahjie.top/categories/java/"},{"name":"java基础","slug":"java/java基础","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"},{"name":"Java中代码生成器","slug":"java/java基础/Maven安装配置/docker/pom报错/sort/Java中代码生成器","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/Java%E4%B8%AD%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"},{"name":"Java驱动方式JDBC连接SQL Server","slug":"java/java基础/Maven安装配置/docker/pom报错/sort/Java中代码生成器/Java驱动方式JDBC连接SQL-Server","permalink":"https://ahjie.top/categories/java/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/Java%E4%B8%AD%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/Java%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8FJDBC%E8%BF%9E%E6%8E%A5SQL-Server/"},{"name":"王者荣耀中一个英雄是怎么被产生的？","slug":"java/王者荣耀中一个英雄是怎么被产生的？","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/"},{"name":"阿里云对象存储Oss","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/"},{"name":"LinkedeList和ArrayList的区别","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"name":"java基础","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/LinkedeList和ArrayList的区别/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/LinkedeList%E5%92%8CArrayList%E7%9A%84%E5%8C%BA%E5%88%AB/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"},{"name":"其他扩展","slug":"Other-extensions","permalink":"https://ahjie.top/categories/Other-extensions/"},{"name":"hexo分类and标签404","slug":"Other-extensions/hexo分类and标签404","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/"},{"name":"特别的惊喜","slug":"Other-extensions/hexo分类and标签404/特别的惊喜","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E7%89%B9%E5%88%AB%E7%9A%84%E6%83%8A%E5%96%9C/"},{"name":"音乐网站","slug":"Other-extensions/hexo分类and标签404/特别的惊喜/音乐网站","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E7%89%B9%E5%88%AB%E7%9A%84%E6%83%8A%E5%96%9C/%E9%9F%B3%E4%B9%90%E7%BD%91%E7%AB%99/"},{"name":"java基础","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/王者荣耀中一个英雄是怎么被产生的？/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E4%BA%A7%E7%94%9F%E7%9A%84%EF%BC%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"},{"name":"阿里云对象存储Oss","slug":"java/阿里云对象存储Oss","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/"},{"name":"java基础","slug":"java/阿里云对象存储Oss/java基础","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/"},{"name":"Maven安装配置","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"docker","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置/docker","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/"},{"name":"pom报错","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/"},{"name":"sort","slug":"java/阿里云对象存储Oss/java基础/Maven安装配置/docker/pom报错/sort","permalink":"https://ahjie.top/categories/java/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8Oss/java%E5%9F%BA%E7%A1%80/Maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/docker/pom%E6%8A%A5%E9%94%99/sort/"},{"name":"在线承接各类开发项目","slug":"Other-extensions/hexo分类and标签404/在线承接各类开发项目","permalink":"https://ahjie.top/categories/Other-extensions/hexo%E5%88%86%E7%B1%BBand%E6%A0%87%E7%AD%BE404/%E5%9C%A8%E7%BA%BF%E6%89%BF%E6%8E%A5%E5%90%84%E7%B1%BB%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE/"},{"name":"PHP后端开发","slug":"php","permalink":"https://ahjie.top/categories/php/"},{"name":"thinkphp5.0实现投票","slug":"php/thinkphp5-0实现投票","permalink":"https://ahjie.top/categories/php/thinkphp5-0%E5%AE%9E%E7%8E%B0%E6%8A%95%E7%A5%A8/"},{"name":"php文件上传API","slug":"php/php文件上传API","permalink":"https://ahjie.top/categories/php/php%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0API/"},{"name":"web前端","slug":"web","permalink":"https://ahjie.top/categories/web/"},{"name":"react和vue","slug":"web/react和vue","permalink":"https://ahjie.top/categories/web/react%E5%92%8Cvue/"},{"name":"彩色文字","slug":"web/react和vue/彩色文字","permalink":"https://ahjie.top/categories/web/react%E5%92%8Cvue/%E5%BD%A9%E8%89%B2%E6%96%87%E5%AD%97/"},{"name":"光标动画","slug":"web/react和vue/彩色文字/光标动画","permalink":"https://ahjie.top/categories/web/react%E5%92%8Cvue/%E5%BD%A9%E8%89%B2%E6%96%87%E5%AD%97/%E5%85%89%E6%A0%87%E5%8A%A8%E7%94%BB/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ahjie.top/tags/JAVA/"},{"name":"其他","slug":"其他","permalink":"https://ahjie.top/tags/%E5%85%B6%E4%BB%96/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ahjie.top/tags/Hexo/"},{"name":"php","slug":"php","permalink":"https://ahjie.top/tags/php/"},{"name":"html","slug":"html","permalink":"https://ahjie.top/tags/html/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ahjie.top/tags/JavaScript/"},{"name":"css","slug":"css","permalink":"https://ahjie.top/tags/css/"},{"name":"Docker","slug":"Docker","permalink":"https://ahjie.top/tags/Docker/"},{"name":"Maven","slug":"Maven","permalink":"https://ahjie.top/tags/Maven/"},{"name":"React","slug":"React","permalink":"https://ahjie.top/tags/React/"},{"name":"Vue","slug":"Vue","permalink":"https://ahjie.top/tags/Vue/"}]}